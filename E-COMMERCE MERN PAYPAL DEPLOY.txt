E-COMMERCE

1.-  install git, in vs code, in the terminal -> change to git bash
     +, select 'default profile', and select git bash 
2.- install extensions (view-> extensions), prettier, and esLint (shows errors)
3.- javascript es6, snippet, and es7 for react
 To test rfc -> tab

4.- create react app
ecom-mern-paypal-deploy>npx create-react-app frontend
> cd frontend
> npm start

5.- create a repository in git
create git ignore:

frontend> rm -rf .git
move .gitignore to main, dragging 

-> select in 'activity bar' -> source control -> 
	1. Initializese repository
    2. publish to gitHub


Create gitignore file

Borre accidentalmente el gitignore file, entonces para volverlo a crear 
Con lo que necesita react ignorar:
frontend> npx react-gitignore


6.- en el gitignore file NO OLVIDAR, QUITAR '/' de node_modules, build


# dependencies
node_modules
/.pnp
.pnp.js
.next

# testing
/coverage

# production
build


7.- if error no scripts while running frontend> npm start
How To Solve sh: react-scripts: command not found Error ?

How To Solve sh: react-scripts: command not found Error ?
To Solve sh: react-scripts: command not found Error Just try to install react-scripts with this command: npm i react-scripts And then try to run your project with npm start command Your error should be fixed now.

sh: react-scripts: command not found
To Solve sh: react-scripts: command not found Error If You are trying any github Project Or others project on your system Then You just have to delete node_modules first and then run npm install (or yarn) to ensure all deps are downloaded. To delete node_modules folder just run this command Or manually delete node_modules folder: rm -rf node_modules And then run npm install to ensure all deps are downloaded: npm install Now, You can run your project with this command: npm start now, Your error must be solved.

8.- RUTAS

https://reactrouter.com/docs/en/v6/getting-started/tutorial

frontend>
1. npm i react-router-dom

	Import { BroswerRouter, Route, Routes } from 'react-router-dom';
	function App() {
  	return (
    	<BroswerRouter>
      	<div className="App">
        		<header className="App-header">
          	<	a href="/">amazona</a>
        		</header>
        <main>
          <Routes>
            <Route path="/" element={<HomeScreen />} />
          </Routes>
.
.
.



2. Create route for Home Screen
3. Create router for product screen 

Link instead of a href .... Link doesn't refresh the page





8.-  create backend folder, in backend > npm init

In package.json add after name:
      "type": "module",  to use import instead of required to use packages
9.- create in backend folder server.js to create the express server
Backend> npm install express           so the package.json now has the line express


In server.js

import express from 'express';
import data from './data.js';
const app = express();

app.use('/api/products', (req, res) => {
  res.send(data.products);
});

const port = process.env.PORT || 5001;  // no funciona con port 5000, dice que est'a en uso
app.listen(port, () => {
  console.log(`serve at http://localhost:${port}`);
});



Then in terminal
Backend> node server.js


--> so if we test: http://localhost:5001/api/products, returns the list of products


10.- INSTALL NODEDEMON
(NOT TO HAVE TO STOP THE SERVER if any changes)
ackend % npm install nodemon --save-dev         //save dev it not to get it to production 



So in package.json:
 "devDependencies": {
    "nodemon": "^2.0.16"
  }


So in scripts in this file add:
"scripts": {
    "start": "nodemon server.js",



Then to run in frontend> npm start           //then listen to all changes without restarting the server



11.- FETCH PRODUCTS FROM BACKEND
--------------------------------


---> to have access to BACKEND, and in the FRONTEND

In /Users/olmedo/Projects/ecom-mern-paypal-deploy/frontend/package.json
Add: 

 {
  "name": "frontend",
  "proxy": "http://localhost:5001",


--> now in frontend we use AXIOS to access data from backend;
So in the frontend install: 

frontend % npm install axios


--> then go to homescreen.js

ADD:

import { useEffect, useState } from 'react';
//import data from '../data';
import axios from 'axios';

function HomeScreen() {
  const [products, setProducts] = useState([]);
  useEffect(() => {
    const fetchData = async () => {
      const result = await axios.get('/api/products');
      setProducts(result.data);
    };
    fetchData();
  }, []);


AND CHANGE IN THIS LINE {products.map((product) => (.    //itwas data.products.map before, pointing to data file


--> now test: inspect in browser -> network --> select XHR and refresh


1:15:15

12.- USE REDUCER to MANAGE COMPLEX STATES instead of useState

To show all the changes in the state

--> define reducer
--> update fetch data
--> get state from usReducer


//REDUCER
const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true };
    case 'FETCH_SUCCESS':
      return { ...state, products: action.payload, loading: false };
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload };
    default:
      return state;
  }
};

function HomeScreen() {


  const [{ loading, error, products }, dispatch] = useReducer(logger(reducer), {
    products: [],
    loading: true,
    error: '',
  });
AND COMMENT:
//const [products, setProducts] = useState([]);
.
.
UPDATE USEEFFECT from:
useEffect(() => {
    const fetchData = async () => {
      const result = await axios.get('/api/products');
      setProducts(result.data);
    };
    fetchData();
  }, []);

TO:
const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true };
    case 'FETCH_SUCCESS':
      return { ...state, products: action.payload, loading: false };
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload };
    default:
      return state;
  }
};


INSTALL LOGGER:
frontend>npm install use-reducer-logger --force 

And add:
import logger from 'use-reducer-logger';
.
.
.

function HomeScreen() {
  const [{ loading, error, products }, dispatch] = useReducer(logger(reducer), {
.
.

-> checking in inspect, we can see now actions in REQUEST, SUCCESS, so just in success PRODUCTS array
is populated

--> NOW SHOW A LOADING BOX

return (
    <div>
      <h1>Featured Products</h1>
      <div className="products">
        {loading ? (
          <div> Loading...</div>
        ) : error ? (
          <div>{error}</div>
        ) : (

...
...
)

To show in browser, INSPECT-> network -> change 'no throttling' to 'slow 3g'


13.- react BOOTSTRAP.   We use REACT BOOTSTRAP

https://react-bootstrap.github.io


frontend> npm install react-bootstrap bootstrap

Por alguna razÃ³n no funciona rpm install, entonces funciona con > yarn add re...


UPDATE APP.js

--> go to 


https://react-bootstrap.github.io/getting-started/introduction

--> layout --> components

import Navbar from 'react-bootstrap/Navbar';
import Container from 'react-bootstrap/Container';

<header className="App-header">
        <Navbar bg="dark" variant="dark" expand="lg">
            <Container>              
              <LinkContainer to="/">
                <Navbar.Brand>amazona</Navbar.Brand>
              </LinkContainer>
            </Container>  
        </Navbar>
...
...
...
For 'LinkContainer'
Frontend>  yarn add react-router-bootstrap
Or
npm install react-router-bootstrap

And add in app.js: 
import { LinkContainer } from 'react-router-bootstrap';

And in index.js
Import 'bootstrap/dist/css/bootstrap.min.css';

In index.css delete styles of 'a' and 





FUNCIONA CON:

Revisar que esto este bien:
import Navbar from 'react-bootstrap/Navbar';
import Container from 'react-bootstrap/Container';
import { LinkContainer } from 'react-router-bootstrap';

              <LinkContainer to="/">
                <Navbar.Brand>amazona</Navbar.Brand>
              </LinkContainer>

OPCIONAL:
              <LinkContainer to="/">
                <NavItem eventKey={1}>amazona</NavItem>
              </LinkContainer>

Ejemplo en: 
https://www.codegrepper.com/code-examples/javascript/frameworks/react/navbar+using+react+bootstrap
https://github.com/react-bootstrap/react-router-bootstrap/issues/259


1:34:10


--> CONVERT PRODUCTLIST TO BOOTSTRAP & CREATE RATING
-*---------------------------------*--
Usar components, cards bootstrap, font awesome, ratings

1:47:30

--> CREATE PRODUCT DETAILS SCREEN , FETCH PRODUCT FROM BACKEND
--------------------------------------------------------------
To show the name in the tab:
Frontend> npm install react-helmet-async

Then in index.js
import { HelmetProvider } from 'react-helmet-async';

.
.
<React.StrictMode>
    <HelmetProvider>
      <App />
    </HelmetProvider>
  </React.StrictMode>
.
.

Then in productScreen.js wrap {product.name} with helmet
	<Helmet>
           <title>{product.name}</title>
        </Helmet>
2:02:40


---> CREATE LOADING AND MESSAGE COMPONENT
Spinner, loading, utils.js for error, message

---> IMPLEMENT ADD TO CART
React context, reducer, store provider, button to add
https://reactjs.org/docs/context.html
- create store.js file en src

Add to cart:
 In store.js add a storeProvider function

In index.js
Add <storeProvider>

In productScreen.js add handler

<Button onClick={addToCartHandler} variant="primary">Add to Cart</Button>

const { state, dispatch: ctxDispatch } =useContext();
  const addToCartHandler = () =>  {
    ctxDispatch({
      type:'CART_ADD_ITEM',
      payload: { ...product, quantity: 1}
    })
  }

2:20:30 Repasar el anterior para ver como fluye

REDUCER:
Reducers are functions that take the current state and an action as 
arguments, and return a new state result. In other words, 
(state, action) => newState.


HOOKS : useEffect, useContext, useState ...
https://www.youtube.com/watch?v=TNhaISOUy6Q&t=209s


useEffect *
---------
https://www.youtube.com/watch?v=rDVe6pmeAjo

useContext
----------
https://www.youtube.com/watch?v=lhMKvyLRWo0
https://www.youtube.com/watch?v=7LIGIN6_R_s

useReducer
----------
https://www.youtube.com/watch?v=uXWycyeTeCs
https://www.youtube.com/watch?v=zIOWnK5RcOU

Review:
09- Manage State By Reducer Hook
14- Create React Context



15.- COMPLETE ADD TO CART FUNCTIONALITY
---------------------------------------
2:28
16.- CREATE CART SCREEN
-----------------------
-Create two columns
-Display item list
-Create action column

2:37

17. COMPLETE CART SCREEN
------------------------
-click handler for inc/dec item
-click handler for remove item
-click handler for checkout

18. CREATE SIGNIN SCREEN
------------------------
-create signin form
-add email and password
-add signing button

2:54

19. Connect To MongoDB Database
-------------------------------
    1. create atlas monogodb database
    2. install local mongodb database
    3. npm install mongoose
    4. connect to mongodb database



Mongodb.com
https://cloud.mongodb.com
USER:deyvidfr@hotmail.com password: HbKHhHCcC

1.- Create new user
User: amazona
Password: amazona

2.- in Network Access: 
Add entries to your API access list:
IP address: 0.0.0.0/0
Description: all

3.- go to databases,
-Go to browse collections (if necessary 'resume' cluster due to inactivity and WAIT)

-add my own data
  Database Name: amazona
  Collection Name: test-collection

-Create a connection URI
  Go to databases
  Connect
  Select Connect to your Application
  And copy the connection string

from: 
mongodb+srv://<username>:<password>@cluster0.h4edm.mongodb.net/?retryWrites=true&w=majority
to:
mongodb+srv://amazona:amazona@cluster0.h4edm.mongodb.net/amazona?retryWrites=true&w=majority

-then we need to connect in mongoosejs.com

    >backend: npm install mongoose
- also install a package to load dotenv file
    >backend: npm install dotenv


-Go to VS Code and open a file 
	Create a .env file in backend
	don't forget to ignore it 'dependencies'. In .gitignore

--> TO INSTALL LOCALLY
docs.mongodb.com/manual/administration/install-community
	Select your operating system
	Go to mongodb.com/products/compass

	Download
	Select platform
	Download
	Drag and drop
	In .env file change:
		
		MONGODB_URI=mongodb://localhost/amazona
		mongodb+srv://amazona:amazona@cluster0.h4edm.mongodb.net/amazona?								retryWrites=true&w=majority

3:05:30

20. Seed Sample Data
  - Create product model
  - create user model
  - create seed route 
  - use route in server.js
  - seed sample product


Check changes in: 
http://localhost:5001/api/seed

3:17

21. Seed Sample Users
- create user model
- seed sample users
- create user routes

To encriptar:
 Backend> npm i bcryptjs  

Check changes in: 
http://localhost:5001/api/seed


22.- create an API for sign in
- create signin api
- npm install jsonwebtoken
- define generateToken

Install express Asynhandler
-backend> npm install express-async-handler

-backend> npm install jsonwebtoken

In .env add:
 JWT_SECRET=somethingsecret


Test using 'advanced rest client' (google chrome addon)

-install
-and test it:
Select: post
http://localhost:5001/api/users/signin
Select: body
Select: application /json
	{
  		"email": "admin@example.com",
    		"password": "123456"
	}
3:32



23: Complete signin screen
- handle a submit action
- save token in store and local storage
- show user name in header

For a beautiful alert

frontend> npm i react-toastify
If it doesn't function: 
Frontend: yarn add react-toastify

3:46:40


24. Create shipping screen
   - create forms inputs
   - handle save shipping address
   - add checkout wizard bar


25. Create Sign up screen
   - create input forms
   - handle submit
   - create backend api

26. Implement Select Payment Method Screen
   - create input forms
   - handle submit

27. Create place order screen
     - show cart Items, payment and address
     - handle place order action
     - create order crate api
4:21:35

28. Implement Place Order Action
 - handle place order action
 - create order create api



29. Create Order Screen
    1. create backend api for order/:id
    2. fetch order api in frontend
    3. show order information in 2 cloumns

30. Pay Order By PayPal
    1. generate paypal client id
    2. create api to return client id
    3. install react-paypal-js
    4. use PayPalScriptProvider in index.js
    5. use usePayPalScriptReducer in Order Screen
    6. implement loadPaypalScript function
    7. render paypal button
    8. implement onApprove payment function
    9. create pay order api in backend


PAYPAL * IMPORTANTE

https://developer.paypal.com/
real paypal account:
	deyvidfr@hotmail.com constrasena de hotmail:HhHHbKCcC10
	constrasena de paypal: HbKHhHCcC10

	dave.id.lmm@gmail.com constrasena de gmail:HhHHbKCcC

-> DASHBOARD -> 
	-> MY APPS
		-> SANDBOX (TEST)
			-> NAME: mern-amazona (default options) -> create

	->copy the client ID to the .env file
		AeJEqLxdexMdzxbmpBzWR-Zc5wJihcN3vV3tZYUtdw7KFqMSm8xun8SMu0-Dr5CFzOcvloPGGH4Oh7tC


-> INSTALL REACT PAYPAL JS
	frontend> npm install @paypal/react-paypal-js

->Paypalscriptprovider wrap the <app /> in Index.js

5:03:40


BUSINESS (US)

sb-lo9zb18060855@business.example.com
]|1oG&S&

CLIENT (US)

sb-wp0vi19705124@personal.example.com
1wO<^PLo


*NOTA: CON BOLIVIA NO FUNCIONA


31. Display Order History
    1. create order screen
    2. create order history api
    3. use api in the frontend

32. Create Profile Screen
    1. get user info from context
    2. show user information
    3. create user update api
    4. update user info

5:24:50

33. Publish To Heroku
    1. create and config node project
    2. serve build folder in frontend folder
    3. Create heroku account
    4. connect it to github
    5. Create mongodb atlas database
    6. Set database connection in heroku env variables
    7. Commit and push

Route folder, create a new node project:
project>npm init

project>npm run build
         

*** If error ERESOLVE 
project> npm config set legacy-peer-deps true
https://www.youtube.com/watch?v=vn97BdYx2K8

HEROKU ACCOUNT
--------------
Heroku: https://www.heroku.com
usuario: deyvidfr@hotmail.com
password: HbKHhHCCC10


GITHUB ACCOUNT
--------------

git hub      github    deyvido   HbKHhHCcC101112 (YA NOO)  => new HhHHbKCcC10   deyvidfr@hotmail.com

ENTER NETLYFY WITH GITHUB ACCOUNT
---------------------------------
https://www.netlify.com/
Enter with GitHub account

user: deyvido, deyvidfr@hotmail.com
password: HhHHbKCcC10

https://www.youtube.com/watch?v=CDtPMR5y0QU&list=PLSXxP8I3oMOnRHttfOHmoUdyNUuqjwEOv&index=3




MONGODB
-------
https://account.mongodb.com/account/login

Mongodb.com
https://cloud.mongodb.com
USER:deyvidfr@hotmail.com password: HbKHhHCcC

Cluster0-> collections->createDB->mern-amazona-db

--> dataBase User
     -> Database Access
    User: mern-amazona
    Password: HbKHhHCcC

-> Deployment-> Database -> connect
     -> add your connection string and copy

     mongodb+srv://<username>:<password>@cluster0.h4edm.mongodb.net/?retryWrites=true&w=majority

Make changes:

	mongodb+srv://mern-amazona:HbKHhHCcC@cluster0.h4edm.mongodb.net/mern-amazona-db?retryWrites=true&w=majority

Copy it to the .env file
	MONGODB_URI=mongodb+srv://mern-amazona:HbKHhHCcC@cluster0.h4edm.mongodb.net/mern-amazona-db?retryWrites=true&w=majority

And change the other to local:
MONGODB_URI_LOCAL=mongodb+srv://amazona:amazona@cluster0.h4edm.mongodb.net/amazona?retryWrites=true&w=majority

-->create a copy of the route file in the root folder


--> root folder> npm start.  (Close all other connections)


--> commit changes
--> go to heroku --> activity




SIGUIENTES

Proyectos con react native

 Build Uber Eats with React Native & YELP API | Redux | Firebase | Google API
https://www.youtube.com/watch?v=jmvbhuJXFow        este tiene code por partes // 


https://www.youtube.com/watch?v=_ivIUCSOZ78


