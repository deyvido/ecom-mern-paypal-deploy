E-COMMERCE

1.-  install git, in vs code, in the terminal -> change to git bash
     +, select 'default profile', and select git bash 
2.- install extensions (view-> extensions), prettier, and esLint (shows errors)
3.- javascript es6, snippet, and es7 for react
 To test rfc -> tab

4.- create react app
ecom-mern-paypal-deploy>npx create-react-app frontend
> cd frontend
> npm start

5.- create a repository in git
create git ignore:

frontend> rm -rf .git
move .gitignore to main, dragging 

-> select in 'activity bar' -> source control -> 
	1. Initializese repository
    2. publish to gitHub


Create gitignore file

Borre accidentalmente el gitignore file, entonces para volverlo a crear 
Con lo que necesita react ignorar:
frontend> npx react-gitignore


6.- en el gitignore file NO OLVIDAR, QUITAR '/' de node_modules, build


# dependencies
node_modules
/.pnp
.pnp.js
.next

# testing
/coverage

# production
build


7.- if error no scripts while running frontend> npm start
How To Solve sh: react-scripts: command not found Error ?

How To Solve sh: react-scripts: command not found Error ?
To Solve sh: react-scripts: command not found Error Just try to install react-scripts with this command: npm i react-scripts And then try to run your project with npm start command Your error should be fixed now.

sh: react-scripts: command not found
To Solve sh: react-scripts: command not found Error If You are trying any github Project Or others project on your system Then You just have to delete node_modules first and then run npm install (or yarn) to ensure all deps are downloaded. To delete node_modules folder just run this command Or manually delete node_modules folder: rm -rf node_modules And then run npm install to ensure all deps are downloaded: npm install Now, You can run your project with this command: npm start now, Your error must be solved.

8.- RUTAS

https://reactrouter.com/docs/en/v6/getting-started/tutorial

frontend>
1. npm i react-router-dom

	Import { BroswerRouter, Route, Routes } from 'react-router-dom';
	function App() {
  	return (
    	<BroswerRouter>
      	<div className="App">
        		<header className="App-header">
          	<	a href="/">amazona</a>
        		</header>
        <main>
          <Routes>
            <Route path="/" element={<HomeScreen />} />
          </Routes>
.
.
.



2. Create route for Home Screen
3. Create router for product screen 

Link instead of a href .... Link doesn't refresh the page





8.-  create backend folder, in backend > npm init

In package.json add after name:
      "type": "module",  to use import instead of required to use packages
9.- create in backend folder server.js to create the express server
Backend> npm install express           so the package.json now has the line express


In server.js

import express from 'express';
import data from './data.js';
const app = express();

app.use('/api/products', (req, res) => {
  res.send(data.products);
});

const port = process.env.PORT || 5001;  // no funciona con port 5000, dice que est'a en uso
app.listen(port, () => {
  console.log(`serve at http://localhost:${port}`);
});



Then in terminal
Backend> node server.js


--> so if we test: http://localhost:5001/api/products, returns the list of products


10.- INSTALL NODEDEMON
(NOT TO HAVE TO STOP THE SERVER if any changes)
ackend % npm install nodemon --save-dev         //save dev it not to get it to production 



So in package.json:
 "devDependencies": {
    "nodemon": "^2.0.16"
  }


So in scripts in this file add:
"scripts": {
    "start": "nodemon server.js",



Then to run in frontend> npm start           //then listen to all changes without restarting the server



11.- FETCH PRODUCTS FROM BACKEND
--------------------------------


---> to have access to BACKEND, and in the FRONTEND

In /Users/olmedo/Projects/ecom-mern-paypal-deploy/frontend/package.json
Add: 

 {
  "name": "frontend",
  "proxy": "http://localhost:5001",


--> now in frontend we use AXIOS to access data from backend;
So in the frontend install: 

frontend % npm install axios


--> then go to homescreen.js

ADD:

import { useEffect, useState } from 'react';
//import data from '../data';
import axios from 'axios';

function HomeScreen() {
  const [products, setProducts] = useState([]);
  useEffect(() => {
    const fetchData = async () => {
      const result = await axios.get('/api/products');
      setProducts(result.data);
    };
    fetchData();
  }, []);


AND CHANGE IN THIS LINE {products.map((product) => (.    //itwas data.products.map before, pointing to data file


--> now test: inspect in browser -> network --> select XHR and refresh


1:15:15

12.- USE REDUCER to MANAGE COMPLEX STATES instead of useState

To show all the changes in the state

--> define reducer
--> update fetch data
--> get state from usReducer


//REDUCER
const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true };
    case 'FETCH_SUCCESS':
      return { ...state, products: action.payload, loading: false };
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload };
    default:
      return state;
  }
};

function HomeScreen() {


  const [{ loading, error, products }, dispatch] = useReducer(logger(reducer), {
    products: [],
    loading: true,
    error: '',
  });
AND COMMENT:
//const [products, setProducts] = useState([]);
.
.
UPDATE USEEFFECT from:
useEffect(() => {
    const fetchData = async () => {
      const result = await axios.get('/api/products');
      setProducts(result.data);
    };
    fetchData();
  }, []);

TO:
const reducer = (state, action) => {
  switch (action.type) {
    case 'FETCH_REQUEST':
      return { ...state, loading: true };
    case 'FETCH_SUCCESS':
      return { ...state, products: action.payload, loading: false };
    case 'FETCH_FAIL':
      return { ...state, loading: false, error: action.payload };
    default:
      return state;
  }
};


INSTALL LOGGER:
frontend>npm install use-reducer-logger --force 

And add:
import logger from 'use-reducer-logger';
.
.
.

function HomeScreen() {
  const [{ loading, error, products }, dispatch] = useReducer(logger(reducer), {
.
.

-> checking in inspect, we can see now actions in REQUEST, SUCCESS, so just in success PRODUCTS array
is populated

--> NOW SHOW A LOADING BOX

return (
    <div>
      <h1>Featured Products</h1>
      <div className="products">
        {loading ? (
          <div> Loading...</div>
        ) : error ? (
          <div>{error}</div>
        ) : (

...
...
)

To show in browser, INSPECT-> network -> change 'no throttling' to 'slow 3g'


13.- react BOOTSTRAP.   We use REACT BOOTSTRAP

https://react-bootstrap.github.io


frontend> npm install react-bootstrap bootstrap

Por alguna razÃ³n no funciona rpm install, entonces funciona con > yarn add re...


UPDATE APP.js

--> go to 


https://react-bootstrap.github.io/getting-started/introduction

--> layout --> components

import Navbar from 'react-bootstrap/Navbar';
import Container from 'react-bootstrap/Container';

<header className="App-header">
        <Navbar bg="dark" variant="dark" expand="lg">
            <Container>              
              <LinkContainer to="/">
                <Navbar.Brand>amazona</Navbar.Brand>
              </LinkContainer>
            </Container>  
        </Navbar>
...
...
...
For 'LinkContainer'
Frontend>  yarn add react-router-bootstrap
Or
npm install react-router-bootstrap

And add in app.js: 
import { LinkContainer } from 'react-router-bootstrap';

And in index.js
Import 'bootstrap/dist/css/bootstrap.min.css';

In index.css delete styles of 'a' and 





FUNCIONA CON:

Revisar que esto este bien:
import Navbar from 'react-bootstrap/Navbar';
import Container from 'react-bootstrap/Container';
import { LinkContainer } from 'react-router-bootstrap';

              <LinkContainer to="/">
                <Navbar.Brand>amazona</Navbar.Brand>
              </LinkContainer>

OPCIONAL:
              <LinkContainer to="/">
                <NavItem eventKey={1}>amazona</NavItem>
              </LinkContainer>

Ejemplo en: 
https://www.codegrepper.com/code-examples/javascript/frameworks/react/navbar+using+react+bootstrap
https://github.com/react-bootstrap/react-router-bootstrap/issues/259


1:34:10


--> CONVERT PRODUCTLIST TO BOOTSTRAP & CREATE RATING
-*---------------------------------*--
Usar components, cards bootstrap, font awesome, ratings

1:47:30

--> CREATE PRODUCT DETAILS SCREEN , FETCH PRODUCT FROM BACKEND
--------------------------------------------------------------
To show the name in the tab:
Frontend> npm install react-helmet-async

Then in index.js
import { HelmetProvider } from 'react-helmet-async';

.
.
<React.StrictMode>
    <HelmetProvider>
      <App />
    </HelmetProvider>
  </React.StrictMode>
.
.

Then in productScreen.js wrap {product.name} with helmet
	<Helmet>
           <title>{product.name}</title>
        </Helmet>
2:02:40


---> CREATE LOADING AND MESSAGE COMPONENT
Spinner, loading, utils.js for error, message

---> IMPLEMENT ADD TO CART
React context, reducer, store provider, button to add
https://reactjs.org/docs/context.html
- create store.js file en src

Add to cart:
 In store.js add a storeProvider function

In index.js
Add <storeProvider>

In productScreen.js add handler

<Button onClick={addToCartHandler} variant="primary">Add to Cart</Button>

const { state, dispatch: ctxDispatch } =useContext();
  const addToCartHandler = () =>  {
    ctxDispatch({
      type:'CART_ADD_ITEM',
      payload: { ...product, quantity: 1}
    })
  }

2:20:30 Repasar el anterior para ver como fluye

REDUCER:
Reducers are functions that take the current state and an action as 
arguments, and return a new state result. In other words, 
(state, action) => newState.


HOOKS : useEffect, useContext, useState ...
https://www.youtube.com/watch?v=TNhaISOUy6Q&t=209s


useEffect *
---------
https://www.youtube.com/watch?v=rDVe6pmeAjo

useContext
----------
https://www.youtube.com/watch?v=lhMKvyLRWo0
https://www.youtube.com/watch?v=7LIGIN6_R_s

useReducer
----------
https://www.youtube.com/watch?v=uXWycyeTeCs
https://www.youtube.com/watch?v=zIOWnK5RcOU

Review:
09- Manage State By Reducer Hook
14- Create React Context



15.- COMPLETE ADD TO CART FUNCTIONALITY
---------------------------------------
2:28
16.- CREATE CART SCREEN
-----------------------
-Create two columns
-Display item list
-Create action column

2:37

17. COMPLETE CART SCREEN
------------------------
-click handler for inc/dec item
-click handler for remove item
-click handler for checkout

18. CREATE SIGNIN SCREEN
------------------------
-create signin form
-add email and password
-add signing button

2:54

19. Connect To MongoDB Database
-------------------------------
    1. create atlas monogodb database
    2. install local mongodb database
    3. npm install mongoose
    4. connect to mongodb database



Mongodb.com
https://cloud.mongodb.com
USER:deyvidfr@hotmail.com password: HbKHhHCcC

1.- Create new user
User: amazona
Password: amazona

2.- in Network Access: 
Add entries to your API access list:
IP address: 0.0.0.0/0
Description: all

3.- go to databases,
-Go to browse collections (if necessary 'resume' cluster due to inactivity and WAIT)

-add my own data
  Database Name: amazona
  Collection Name: test-collection

-Create a connection URI
  Go to databases
  Connect
  Select Connect to your Application
  And copy the connection string

from: 
mongodb+srv://<username>:<password>@cluster0.h4edm.mongodb.net/?retryWrites=true&w=majority
to:
mongodb+srv://amazona:amazona@cluster0.h4edm.mongodb.net/amazona?retryWrites=true&w=majority

-then we need to connect in mongoosejs.com

    >backend: npm install mongoose
- also install a package to load dotenv file
    >backend: npm install dotenv


-Go to VS Code and open a file 
	Create a .env file in backend
	don't forget to ignore it 'dependencies'. In .gitignore

--> TO INSTALL LOCALLY
docs.mongodb.com/manual/administration/install-community
	Select your operating system
	Go to mongodb.com/products/compass

	Download
	Select platform
	Download
	Drag and drop
	In .env file change:
		
		MONGODB_URI=mongodb://localhost/amazona
		mongodb+srv://amazona:amazona@cluster0.h4edm.mongodb.net/amazona?								retryWrites=true&w=majority




https://www.youtube.com/watch?v=CDtPMR5y0QU&list=PLSXxP8I3oMOnRHttfOHmoUdyNUuqjwEOv&index=3


